import datetime

from sqlalchemy import Table
from sqlalchemy import Column
from sqlalchemy import func
from sqlalchemy import ForeignKey
from sqlalchemy import String

from sqlalchemy.types import Integer
from sqlalchemy.types import Unicode
from sqlalchemy.types import UnicodeText
from sqlalchemy.types import DateTime

from sqlalchemy.types import Boolean
from sqlalchemy.types import Enum
from sqlalchemy.orm import relationship
from sqlalchemy.orm import selectinload
from sqlalchemy.orm import backref

from .meta import Base
from .meta import DBSession
from ..utils.util import title_to_slug


class SiteRoot(Base):
    __tablename__ = 'site_root'
    id = Column(Integer, primary_key=True)
    # Use for meta title, defaults to content title
    meta_title = Column(Unicode(250))
    # Description is what appears in search result, defaults to autogenerated content.
    description = Column(UnicodeText)
    # Slug is the url of the content
    slug = Column(String(2000), nullable=False)
    
    parent_id = Column(Integer, ForeignKey('site_root.id'))
    children = relationship("SiteRoot",
                        #cascade="all, delete,delete-orphan",
                        backref=backref("parent", remote_side=id)
                    )
    type = Column(String(50), nullable=False)
    
    __mapper_args__ = {
        'polymorphic_identity':'site_root',
        'polymorphic_on':type
    }

    def __init__(self, 
        meta_title: str = None, 
        description: str = None,
        slug: str = None, 
        parent_id: int = None):

        self.meta_title = meta_title
        self.description = description
        self.slug = slug
        self.parent_id = parent_id
                

    def keys(self):
        return [child.slug for child in self.children]
    
    def slugs(self):
        return [i.slug for i in DBSession.query(self.__class__).all()]

    def values(self):
        return self.children

    def get_slug(self):
        
        return self.slug

    def generate_unique_slug(self):
        
        return title_to_slug(self.meta_title,self.slugs())



content_tags = Table("content_tags", Base.metadata,
Column('tag_id', ForeignKey('tags.id'), primary_key=True),
Column('content_id', ForeignKey('contents.id'), primary_key=True))


class Tag(Base):
    
    __tablename__ = "tags"
    id = Column(Integer, primary_key=True)
    name = Column(Unicode(50), nullable=False)
    contents = relationship("Content", back_populates='tags', secondary=content_tags)


class Content(SiteRoot):

    """ This is the base class for creation of custom content type"""

    __tablename__ = "contents"
    id= Column(Integer, ForeignKey('site_root.id'), primary_key=True)
    #Content title
    title = Column(Unicode(255))
    status = Column(Enum("draft","published", name="status"), default='published')
    creation_date = Column(DateTime)
    modification_date = Column(DateTime)
    in_menu = Column(Boolean(name="in_menu"), default=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    user = relationship("User", back_populates="contents")
    tags = relationship('Tag', secondary=content_tags, back_populates='contents')

    __mapper_args__ = {
        'polymorphic_identity':'content'
    }

    def __init__(self, 
        title: str = None, 
        status: str = "published",
        creation_date: datetime.datetime = None,
        modification_date: datetime.datetime = None,
        in_menu: bool = True,
        user: 'User' = None,
        tags: list = [],
        **kwargs):

        super().__init__(**kwargs)

        self.title= title
        self.status = status
        self.creation_date = creation_date
        self.modification_date = modification_date
        self.in_menu = in_menu
        self.user = user
        self.tags = tags

        
    @classmethod
    def get_by_id(cls,id):
        return DBSession.query(cls).filter_by(id=id).first()
    
    @classmethod
    def get_by_slug(cls,slug):
        
        return DBSession.query(cls).filter_by(slug=slug).first()
        

class Document(Content):
    " Document adds body to content"
    __tablename__ = 'documents'
    id = Column(Integer, ForeignKey('contents.id'), primary_key=True)
    body = Column(UnicodeText)
    
    __mapper_args__ = {
        'polymorphic_identity':'document'
    }

    def __init__(self, body='', **kwargs):

        super().__init__(**kwargs)

        self.body = body


    def get_slug(self):

        "Build slugs from parents"

        slug = super(Document,self).get_slug()
        if self.parent is not None:
            return "%s/%s" % (self.parent.slug, slug)
        return slug

    def set_slug(self, slug):
        
        pass
    
    def set_parent(self):
        pass



class Category(Base):
    __tablename__ = 'categories'
    id = Column(Integer, primary_key=True)
    name = Column(Unicode(50), nullable=False)
    posts = relationship('Post', back_populates="category")


class Post(Document):
    __tablename__ = "posts"
    id = Column(Integer, ForeignKey("documents.id"), primary_key=True)
    category_id = Column(Integer, ForeignKey('categories.id'))
    category = relationship("Category", back_populates="posts")
    

    @classmethod
    def get_query(cls, with_joinedload = True):
        query = DBSession.query(cls)
        if with_joinedload:
            query = query.options(selectinload(cls.tags))
        return query
    
    @classmethod
    def get_by_id(cls, id, with_joinedload=True):
        post = cls.get_query(with_joinedload)
        return post.filter(cls.id==id).first()
    
    @classmethod
    def post_bunch(cls, order_by, how_many=10, published=True, with_joinedload=True):
        posts = cls.get_query(with_joinedload)
        posts = posts.filter(published==published).order_by(order_by)
        return posts.limit(how_many).all()



class File(Content):
    " A file is an image,video etc. It adds filename to content"
    __tablename__ = 'files'
    id = Column(Integer, ForeignKey('contents.id'),primary_key=True)
    filename = Column(Unicode(255))
    


    